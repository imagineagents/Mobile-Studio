"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require("events");
var helpers_1 = require("../helpers");
var DeviceLogProviderBase = (function (_super) {
    __extends(DeviceLogProviderBase, _super);
    function DeviceLogProviderBase($logFilter, $logger) {
        _super.call(this);
        this.$logFilter = $logFilter;
        this.$logger = $logger;
        this.devicesLogOptions = {};
    }
    DeviceLogProviderBase.prototype.setApplictionPidForDevice = function (deviceIdentifier, pid) {
        this.setDeviceLogOptionsProperty(deviceIdentifier, function (deviceLogOptions) { return deviceLogOptions.applicationPid; }, pid);
    };
    DeviceLogProviderBase.prototype.setDefaultLogLevelForDevice = function (deviceIdentifier) {
        var logLevel = (this.devicesLogOptions[deviceIdentifier] && this.devicesLogOptions[deviceIdentifier].logLevel) || this.$logFilter.loggingLevel;
        this.setLogLevel(logLevel, deviceIdentifier);
        return logLevel;
    };
    DeviceLogProviderBase.prototype.getApplicationPidForDevice = function (deviceIdentifier) {
        return this.devicesLogOptions[deviceIdentifier] && this.devicesLogOptions[deviceIdentifier].applicationPid;
    };
    DeviceLogProviderBase.prototype.setDeviceLogOptionsProperty = function (deviceIdentifier, propNameFunction, propertyValue) {
        var propertyName = helpers_1.getPropertyName(propNameFunction);
        if (propertyName) {
            this.devicesLogOptions[deviceIdentifier] = this.devicesLogOptions[deviceIdentifier] || {};
            this.devicesLogOptions[deviceIdentifier][propertyName] = propertyValue;
        }
    };
    return DeviceLogProviderBase;
}(events_1.EventEmitter));
exports.DeviceLogProviderBase = DeviceLogProviderBase;
