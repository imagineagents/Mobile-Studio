"use strict";
var path = require("path");
var shelljs = require("shelljs");
var constants = require("../../constants");
var minimatch = require("minimatch");
var Future = require("fibers/future");
var TnsModulesCopy = (function () {
    function TnsModulesCopy(outputRoot, $options, $fs) {
        this.outputRoot = outputRoot;
        this.$options = $options;
        this.$fs = $fs;
    }
    TnsModulesCopy.prototype.copyModules = function (dependencies, platform) {
        var _this = this;
        var _loop_1 = function(entry) {
            var dependency = dependencies[entry];
            this_1.copyDependencyDir(dependency);
            if (dependency.name === constants.TNS_CORE_MODULES_NAME) {
                var tnsCoreModulesResourcePath = path.join(this_1.outputRoot, constants.TNS_CORE_MODULES_NAME);
                var allFiles = this_1.$fs.enumerateFilesInDirectorySync(tnsCoreModulesResourcePath);
                var matchPattern_1 = this_1.$options.release ? "**/*.ts" : "**/*.d.ts";
                var deleteFilesFutures = allFiles.filter(function (file) { return minimatch(file, matchPattern_1, { nocase: true }); }).map(function (file) { return _this.$fs.deleteFile(file); });
                Future.wait(deleteFilesFutures);
                shelljs.rm("-rf", path.join(tnsCoreModulesResourcePath, "node_modules"));
                shelljs.cp("-Rf", path.join(tnsCoreModulesResourcePath, "*"), this_1.outputRoot);
                shelljs.rm("-rf", tnsCoreModulesResourcePath);
            }
        };
        var this_1 = this;
        for (var entry in dependencies) {
            _loop_1(entry);
        }
    };
    TnsModulesCopy.prototype.copyDependencyDir = function (dependency) {
        if (dependency.depth === 0) {
            var isScoped = dependency.name.indexOf("@") === 0;
            var targetDir = this.outputRoot;
            if (isScoped) {
                targetDir = path.join(this.outputRoot, dependency.name.substring(0, dependency.name.indexOf("/")));
            }
            shelljs.mkdir("-p", targetDir);
            shelljs.cp("-Rf", dependency.directory, targetDir);
            var targetPackageDir = path.join(targetDir, dependency.name);
            shelljs.rm("-rf", path.join(targetPackageDir, "platforms"));
        }
    };
    return TnsModulesCopy;
}());
exports.TnsModulesCopy = TnsModulesCopy;
var NpmPluginPrepare = (function () {
    function NpmPluginPrepare($fs, $pluginsService, $platformsData) {
        this.$fs = $fs;
        this.$pluginsService = $pluginsService;
        this.$platformsData = $platformsData;
    }
    NpmPluginPrepare.prototype.beforePrepare = function (dependencies, platform) {
        this.$platformsData.getPlatformData(platform).platformProjectService.beforePrepareAllPlugins(dependencies).wait();
    };
    NpmPluginPrepare.prototype.afterPrepare = function (dependencies, platform) {
        this.$platformsData.getPlatformData(platform).platformProjectService.afterPrepareAllPlugins().wait();
        this.writePreparedDependencyInfo(dependencies, platform);
    };
    NpmPluginPrepare.prototype.writePreparedDependencyInfo = function (dependencies, platform) {
        var prepareData = {};
        _.values(dependencies).forEach(function (d) {
            prepareData[d.name] = true;
        });
        this.$fs.createDirectory(this.preparedPlatformsDir(platform)).wait();
        this.$fs.writeJson(this.preparedPlatformsFile(platform), prepareData, "    ", "utf8").wait();
    };
    NpmPluginPrepare.prototype.preparedPlatformsDir = function (platform) {
        var platformRoot = this.$platformsData.getPlatformData(platform).projectRoot;
        if (/android/i.test(platform)) {
            return path.join(platformRoot, "build", "intermediates");
        }
        else if (/ios/i.test(platform)) {
            return path.join(platformRoot, "build");
        }
        else {
            throw new Error("Invalid platform: " + platform);
        }
    };
    NpmPluginPrepare.prototype.preparedPlatformsFile = function (platform) {
        return path.join(this.preparedPlatformsDir(platform), "prepared-platforms.json");
    };
    NpmPluginPrepare.prototype.getPreviouslyPreparedDependencies = function (platform) {
        if (!this.$fs.exists(this.preparedPlatformsFile(platform)).wait()) {
            return {};
        }
        return this.$fs.readJson(this.preparedPlatformsFile(platform), "utf8").wait();
    };
    NpmPluginPrepare.prototype.allPrepared = function (dependencies, platform) {
        var result = true;
        var previouslyPrepared = this.getPreviouslyPreparedDependencies(platform);
        _.values(dependencies).forEach(function (d) {
            if (!previouslyPrepared[d.name]) {
                result = false;
            }
        });
        return result;
    };
    NpmPluginPrepare.prototype.preparePlugins = function (dependencies, platform) {
        var _this = this;
        if (_.isEmpty(dependencies) || this.allPrepared(dependencies, platform)) {
            return;
        }
        this.beforePrepare(dependencies, platform);
        _.each(dependencies, function (dependency) {
            var isPlugin = !!dependency.nativescript;
            if (isPlugin) {
                _this.$pluginsService.prepare(dependency, platform).wait();
            }
        });
        this.afterPrepare(dependencies, platform);
    };
    return NpmPluginPrepare;
}());
exports.NpmPluginPrepare = NpmPluginPrepare;
