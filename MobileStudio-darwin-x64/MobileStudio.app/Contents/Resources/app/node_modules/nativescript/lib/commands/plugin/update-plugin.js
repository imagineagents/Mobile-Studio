"use strict";
var UpdatePluginCommand = (function () {
    function UpdatePluginCommand($pluginsService, $errors) {
        this.$pluginsService = $pluginsService;
        this.$errors = $errors;
        this.allowedParameters = [];
    }
    UpdatePluginCommand.prototype.execute = function (args) {
        var _this = this;
        return (function () {
            var pluginNames = args;
            if (!pluginNames || args.length === 0) {
                var installedPlugins = _this.$pluginsService.getAllInstalledPlugins().wait();
                pluginNames = installedPlugins.map(function (p) { return p.name; });
            }
            _.each(pluginNames, function (p) {
                _this.$pluginsService.remove(p).wait();
                _this.$pluginsService.add(p).wait();
            });
        }).future()();
    };
    UpdatePluginCommand.prototype.canExecute = function (args) {
        var _this = this;
        return (function () {
            if (!args || args.length === 0) {
                return true;
            }
            var installedPlugins = _this.$pluginsService.getAllInstalledPlugins().wait();
            var installedPluginNames = installedPlugins.map(function (pl) { return pl.name; });
            var pluginName = args[0].toLowerCase();
            if (!_.some(installedPluginNames, function (name) { return name.toLowerCase() === pluginName; })) {
                _this.$errors.failWithoutHelp("Plugin \"" + pluginName + "\" is not installed.");
            }
            return true;
        }).future()();
    };
    return UpdatePluginCommand;
}());
exports.UpdatePluginCommand = UpdatePluginCommand;
$injector.registerCommand("plugin|update", UpdatePluginCommand);
