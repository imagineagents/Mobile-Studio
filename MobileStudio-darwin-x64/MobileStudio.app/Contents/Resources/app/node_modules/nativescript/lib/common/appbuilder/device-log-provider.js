"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var device_log_provider_base_1 = require("../mobile/device-log-provider-base");
var DeviceLogProvider = (function (_super) {
    __extends(DeviceLogProvider, _super);
    function DeviceLogProvider($logFilter, $logger) {
        _super.call(this, $logFilter, $logger);
        this.$logFilter = $logFilter;
    }
    DeviceLogProvider.prototype.logData = function (line, platform, deviceIdentifier) {
        var logLevel = this.setDefaultLogLevelForDevice(deviceIdentifier);
        var applicationPid = this.getApplicationPidForDevice(deviceIdentifier), data = this.$logFilter.filterData(platform, line, applicationPid, logLevel);
        if (data) {
            this.emit('data', deviceIdentifier, data);
        }
    };
    DeviceLogProvider.prototype.setLogLevel = function (logLevel, deviceIdentifier) {
        var _this = this;
        if (deviceIdentifier) {
            this.setDeviceLogOptionsProperty(deviceIdentifier, function (deviceLogOptions) { return deviceLogOptions.logLevel; }, logLevel.toUpperCase());
        }
        else {
            this.$logFilter.loggingLevel = logLevel.toUpperCase();
            _.keys(this.devicesLogOptions).forEach(function (deviceId) {
                _this.devicesLogOptions[deviceId] = _this.devicesLogOptions[deviceId] || {};
                _this.devicesLogOptions[deviceId].logLevel = _this.$logFilter.loggingLevel;
            });
        }
    };
    return DeviceLogProvider;
}(device_log_provider_base_1.DeviceLogProviderBase));
exports.DeviceLogProvider = DeviceLogProvider;
$injector.register("deviceLogProvider", DeviceLogProvider);
